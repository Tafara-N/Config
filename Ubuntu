# My Ubuntu terminal configurations

# Uninstalling VIM

sudo apt-get remove vim.tiny
sudo apt-get remove vim

# Installing VIM

sudo add-apt-repository ppa:jonathonf/vim (Latest version)

sudo apt update

sudo apt install vim

vim --version

# Adding plugins

Plugin manager that lets us add/remove plugins

git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim

# For VIM setup, look into the setup.md file

# Installing NVIM

1. Download nvim-linux64.tar.gz from (https://github.com/neovim/neovim/releases)

2. On WSL, move file from Windows to Linux destination (mv nvim-linux64.tar.gz /usr/local/bin)

3. cd /usr/local/bin

4. sudo tar xzvf nvim-linux64.tar.gz (Extract the file)

5. Remove nvim-linux64.tar.gz, because we have the nvim-linux64 file

# Create a symbolic link

6.ln -s ./nvim-linux64/bin/nvim ./nvim

# Installing LazyVim

# Back up current Neovim

# Step 1

(# required)
mv ~/.config/nvim{,.bak}

(# optional but recommended)
mv ~/.local/share/nvim{,.bak}
mv ~/.local/state/nvim{,.bak}
mv ~/.cache/nvim{,.bak}

Step 2

git clone https://github.com/LazyVim/starter ~/.config/nvim

Step 3: Remove the .git folder, so you can add it to your own repo later

rm -rf ~/.config/nvim/.git

# Customizing nvim

# Navigate to:

# Linux:

.Config >> nvim >> lua >> config >> options.lua

## Windows:

AppData >> Local >> nvim >> lua >> config >> options.lua

# Databases

# Installing mySQL

sudo apt install mysql-server

sudo service mysql status

sudo service mysql stop

sudo service mysql start

# To set password for root User

sudo mysql

ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password you want';

# Exit out of mysql
# Run the secure installation script

sudo mysql_secure_installation

# Enter the password you just set:

# Press y (yes) on all the questions

# After all is done, if we try to login into mysql with root it won't work:

sudo mysql                    
ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: NO)

# To fix this:

mysql -u root -p

# Enter your mysql password you set:

ALTER USER 'root'@'localhost' IDENTIFIED WITH auth_socket;

# Exit out of mysql

# Installing betty linter for .c files

1. mkdir Betty && cd Betty

2. git clone https://github.com/holbertonschool/Betty.git

3. cd Betty

4. sudo ./install.sh

5. vim betty and paste >> look in the setup file

6. chmod u+x betty

7. sudo mv betty /bin/

# Batcat command (cat)

# Add

alias bat="batcat" in your .bashrc or .zshrc

# Langauages

# Python

# Installation 1:

# Deadsnakes repository

1. sudo add-apt-repository ppa:deadsnakes/ppa

2. ls -l /etc/apt/sources.list.d/ (Checking if it has been added)

3. sudo apt-get update

4. sudo apt install python3.12 -y

By default Ubuntu comes with Python 3.10 installed, so we need to manage these two versions we have.

If you want the latest version of Python, we have to give it the most priorities.

5. sudo update-alternatives --install /usr/bin/python3 python3 /usr//bin/python3.10 1

6. sudo update-alternatives --config python3

# Installation 2:

# Compiling from source

1. sudo apt-get update

2. sudo apt -y install gdb lcov libbz2-dev libffi-dev libgdbm-dev libgdbm-compat-dev liblzma-dev libncurses5-dev libreadline6-dev libssl-dev lzma lzma-dev tk-dev uuid-dev zlib1g-dev gcc make pkg-config

Go to Python.org on your browser and copy link of the version you want, eg:

3. wget https://www.python.org/ftp/python/3.12.2/Python-3.12.2.tar.xz

# After step 3 finishes downloading, extract the tarball file

tar xvf Python-3.12.2.tar.xz

4. cd Python-3.12.0

5. sudo ./configure --enable-optimizations

6. sudo make -j 2

# The 2 is for checking the number of cores

nproc

7. sudo make install

# Extras: Importing my own modules

# PATH to the directory of the modules

export PYTHONPATH=/home/tafara/Documents/Code/Programs/Python/Codes/Modules:${PYTHONPATH}

echo $PYTHONPATH

# Java

1. sudo apt-get update

Go to Oracle and download the JDK version you want

2. wget https://download.oracle.com/java/21/latest/jdk-21_linux-x64_bin.deb

3. sudo dpkg -i jdk-21_linux-x64_bin.deb (To install Java)

# Go

Visit the Go website and copy the link of the version you want

1. wget https://go.dev/dl/go1.22.0.linux-amd64.tar.gz

2. tar -xzf go1.22.0.linux-amd64.tar.gz

3. sudo mv go /usr/local

# Add into your .bashrc or .zshrc files

4. export PATH=$PATH:/usr/local/go/bin

# EXTRAS

Subfinder, a tool for looking for subdomains

5. go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest

6. cd go/bin/

7. sudo mv subfinder /usr/bin

# Ruby

Visit [rvm](https://rvm.io/rvm/install)

1. gpg --keyserver keyserver.ubuntu.com --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB

Visit [Ruby](https://github.com/rvm/ubuntu_rvm)

# You need software-properties-common installed in order to add PPA repositories.

# If not installed:

sudo apt-get install software-properties-common

2. sudo apt-add-repository -y ppa:rael-gc/rvm

3. sudo apt-get update

4. sudo apt-get install rvm

5. sudo usermod -a -G rvm $USER

6. echo 'source "/etc/profile.d/rvm.sh"' >> ~/.bashrc

Reboot

7. rvm install ruby (version)

To have multiple versions of Ruby for different projects.

1. Navigate to the Project folder and create a .ruby-version file

2. Inside the .ruby-version file >> the version you want only, eg 3.3.0

# Node.js

Visit (https://github.com/nvm-sh/nvm)

1. curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash

2. nvm install node

To switch between installed versions

1. nvm alias default (version you want)

# Terminal Set Up

# Install Oh My ZSH

sudo apt install zsh

sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"

# Install Powerlevel Plug themes

1. git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k

2. Set ZSH_THEME="powerlevel10k/powerlevel10k" in ~/.zshrc.

3. source .zshrc

# Plugins

1. git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions

2. git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting

3. Add to your .zshrc file,  plugins=(git sudo zsh-autosuggestions zsh-syntax-highlighting)
